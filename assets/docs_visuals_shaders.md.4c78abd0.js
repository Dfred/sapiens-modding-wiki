import{_ as e,c as s,o as a,d as l}from"./app.289883e3.js";const m=JSON.parse('{"title":"Shaders","description":"","frontmatter":{},"headers":[{"level":2,"title":"Modding Shaders","slug":"modding-shaders","link":"#modding-shaders","children":[]},{"level":2,"title":"Shader Types","slug":"shader-types","link":"#shader-types","children":[]},{"level":2,"title":"Getting Started with GLSL","slug":"getting-started-with-glsl","link":"#getting-started-with-glsl","children":[{"level":3,"title":"Install the VulkanSDK","slug":"install-the-vulkansdk","link":"#install-the-vulkansdk","children":[]},{"level":3,"title":"Compile your Shader","slug":"compile-your-shader","link":"#compile-your-shader","children":[]},{"level":3,"title":"Dependency Management","slug":"dependency-management","link":"#dependency-management","children":[]},{"level":3,"title":"Compiler Helper","slug":"compiler-helper","link":"#compiler-helper","children":[]}]},{"level":2,"title":"Example","slug":"example","link":"#example","children":[]}],"relativePath":"docs/visuals/shaders.md","lastUpdated":1664321640000}'),n={name:"docs/visuals/shaders.md"},o=l(`<h1 id="shaders" tabindex="-1">Shaders <a class="header-anchor" href="#shaders" aria-hidden="true">#</a></h1><p>Shaders in Sapiens come in two folders:</p><ul><li><code>glsl</code> folder contains the raw, uncompiled shaders.</li><li><code>spv</code> contains the compiled shaders, that the game actually reads</li></ul><h2 id="modding-shaders" tabindex="-1">Modding Shaders <a class="header-anchor" href="#modding-shaders" aria-hidden="true">#</a></h2><p>To mod shaders, you simply need to put an asset into your mods <code>spv</code> folder, with a name matching one of the games shaders. This shader will be picked up by the game.</p><h2 id="shader-types" tabindex="-1">Shader Types <a class="header-anchor" href="#shader-types" aria-hidden="true">#</a></h2><p>There are two shader types:</p><ul><li><code>frag</code>: These shaders essentially set the &#39;color&#39; of the thing being shaded</li><li><code>vert</code>: These shaders essentially set the &#39;shape&#39; of the thing being shaded</li></ul><p>Dave uses both shader types heavily to create Sapiens.</p><h2 id="getting-started-with-glsl" tabindex="-1">Getting Started with GLSL <a class="header-anchor" href="#getting-started-with-glsl" aria-hidden="true">#</a></h2><p>Before you can realistically ship a shader mod for Sapiens, you will need the ability to write and compile shaders. This tutorial will walk you through those steps.</p><h3 id="install-the-vulkansdk" tabindex="-1">Install the VulkanSDK <a class="header-anchor" href="#install-the-vulkansdk" aria-hidden="true">#</a></h3><p>You can download the VulkanSDK <a href="https://vulkan.lunarg.com/sdk/home#windows" target="_blank" rel="noreferrer">here</a>.</p><p>Simply go through the installation wizard like normal.</p><h3 id="compile-your-shader" tabindex="-1">Compile your Shader <a class="header-anchor" href="#compile-your-shader" aria-hidden="true">#</a></h3><p>To compile your shader, you will need to execute your shader using the <code>glslc.exe</code> executable, shipped with Vulkan. By default this is located in <code>C:/VulkanSDK/x.x.xxx.x/Bin/glslc.exe</code>.</p><p>Here is a sample command:</p><p><code>C:/VulkanSDK/x.x.xxx.x/Bin/glslc.exe my_shader.frag -std=450core -o my_shader.frag.spv</code></p><ul><li><code>my_shader.frag</code> This is the file where your shader</li><li><code>-std=450core</code> This sets the version, since dave neglected to do so at the top of the shader files</li><li><code>my_shader.frag.spv</code> This is the file name/location where the output will be placed</li></ul><h3 id="dependency-management" tabindex="-1">Dependency Management <a class="header-anchor" href="#dependency-management" aria-hidden="true">#</a></h3><p>Shaders in Sapiens often rely on <em>other shaders</em>. When compiling, you therefor need to ensure that any dependency <code>glsl</code> shaders are also available, in the expected folder structure.</p><h3 id="compiler-helper" tabindex="-1">Compiler Helper <a class="header-anchor" href="#compiler-helper" aria-hidden="true">#</a></h3><p>I wrote a little script to make this whole process easier: <a href="https://gist.github.com/SirLich/1ada6df219ab9c1d2a92bcdcc4ca4335" target="_blank" rel="noreferrer">Sapiens Shader Compiler</a></p><p>To use the script, drop it into your mod folder. Then create your shaders in <code>glsl</code> folder, and also create a blank <code>spv</code> folder.</p><p>When you run the script, it will compile all your <code>glsl</code> shaders into <code>spv</code> shaders, ensuring that dependencies are satisfied.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h2><p>Here is a simple example of Shaders in action, which you can use as a test-case. We will be editing <code>lookAtTerrainMesh.frag</code>, since it&#39;s very simple.</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre><code><span class="line"><span style="color:#82AAFF;">layout</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">location </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> out vec4 data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">layout</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">location </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> in </span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> outAnimation</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// This is the old value, which is a black outline:</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// data = vec4(0.05,0.05,0.05,1.0);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// This is the new value, which is a red outline</span></span>
<span class="line"><span style="color:#F07178;">    data </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">vec4</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Compile this shader (see above), and place it into <code>mod/spv/lookAtTerrainMesh.frag.spv</code>.</p><p>When you load into the game, hexegons should show as cyan.</p>`,30),t=[o];function r(i,p,d,c,h,y){return a(),s("div",null,t)}const g=e(n,[["render",r]]);export{m as __pageData,g as default};
