import{_ as s,o as e,c as a,U as o}from"./chunks/framework.1eef7d9b.js";const n="/assets/flat-planet-result.6d719821.png",u=JSON.parse('{"title":"World Generation","description":"","frontmatter":{},"headers":[],"relativePath":"docs/scripting/worldgen.md","filePath":"docs/scripting/worldgen.md","lastUpdated":1686225764000}'),t={name:"docs/scripting/worldgen.md"},l=o(`<h1 id="world-generation" tabindex="-1">World Generation <a class="header-anchor" href="#world-generation" aria-label="Permalink to &quot;World Generation&quot;">​</a></h1><p>World generation is split across multiple parts, knowledge of <a href="/guide/c-getting-started.html">C modding</a> is required.</p><h2 id="common-objects" tabindex="-1">Common Objects <a class="header-anchor" href="#common-objects" aria-label="Permalink to &quot;Common Objects&quot;">​</a></h2><p>Common objects are used in more than one stage of world generation.</p><h3 id="spworldgenoptions" tabindex="-1">SPWorldGenOptions <a class="header-anchor" href="#spworldgenoptions" aria-label="Permalink to &quot;SPWorldGenOptions&quot;">​</a></h3><p><code>SPWorldGenOptions</code> is used to pass settings from the GUI to the generation functions. It&#39;s used in <code>spHeightGet</code> for vertex height generation and <code>spRainfallGet</code> for rainfall generation. It&#39;s defined in <code>SPCommon.h</code></p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">SPWorldGenOptions</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> heightOffset</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> rainfallMultiplier</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> temperatureOffset</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	SPVec3 scales</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	SPVec3 influences</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="spnoise" tabindex="-1">SPNoise <a class="header-anchor" href="#spnoise" aria-label="Permalink to &quot;SPNoise&quot;">​</a></h3><p><code>SPNoise</code> is part of the noise generation system. While the exact details are unknown it can be used to generate noise values or generate things with a chance.</p><h4 id="spnoiseget" tabindex="-1">spNoiseGet <a class="header-anchor" href="#spnoiseget" aria-label="Permalink to &quot;spNoiseGet&quot;">​</a></h4><p>This function allows you to sample the noise value at a specific location. It takes three arguments:</p><ul><li><code>SPNoise* noise</code> An instance of <code>SPNoise</code></li><li><code>SPVec3 vec</code> The point you want to sample</li><li><code>int endOctave</code> Sets the &quot;detail&quot; or frequency of your noise.</li></ul><p>The two last arguments can be tweaked to get a desired result. Do not set <code>endOctave</code> too high (max ~8) as this increases the time it takes to sample noise values.</p><p>Here are four examples of using <code>spNoiseGet</code> to set terrain height on a certain position called <code>noiseLoc</code>:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">spNoiseGet</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">noise1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> noiseLoc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // &lt;- Creates a world with large oceans and large continents, while keeping the terrain relatively flat</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">spNoiseGet</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">noise1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> noiseLoc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // &lt;- Creates a world with more details: islands, lakes, etc. and continents and oceans are slightly smaller, but everything remains relatively flat</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">spNoiseGet</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">noise1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">spVec3Mul</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">noiseLoc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // &lt;- Creates a world consisting entirely of small, smooth and relatively flat islands</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">spNoiseGet</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">noise1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">spVec3Mul</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">noiseLoc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // &lt;- Creates a world consisting entirely of small but rugged islands</span></span></code></pre></div><h2 id="vertex-terrain-generation" tabindex="-1">Vertex Terrain Generation <a class="header-anchor" href="#vertex-terrain-generation" aria-label="Permalink to &quot;Vertex Terrain Generation&quot;">​</a></h2><p>Vertex Terrain generation determines the height of every point in the world. This height is represented in the <a href="/docs/visuals/coordinates.html">prerender coordinate scale</a>. The methods required for vertex generation are defined in <code>SPHeight.h</code>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can convert meters into the prerender scale by using the <code>SP_METERS_TO_PRERENDER</code> macro:</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> heightInPrerenderScale </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SP_METERS_TO_PRERENDER</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">heightInMeters</span><span style="color:#89DDFF;">);</span></span></code></pre></div></div><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h3><p>The following methods can be overridden to implement custom vertex terrain generation.</p><h4 id="spheightget" tabindex="-1">spHeightGet <a class="header-anchor" href="#spheightget" aria-label="Permalink to &quot;spHeightGet&quot;">​</a></h4><ul><li><code>previousHeight: SPVec4</code> when <code>spReplacesPreviousHeight</code> returns false, then previousHeight is the output of the previous mod, otherwise it should be ignored</li><li><code>noise1: SPNoise*</code> An instance of a noise generator, can be used to get smooth noise values at a given point.</li><li><code>noise2: SPNoise*</code> An instance of a noise generator, can be used to get smooth noise values at a given point. Same as <code>noise1</code> but initialized with a different seed.</li><li><code>pointNormal: SPVec3</code> The normalized location on the planet , you can imagine it as sampling points on a sphere with <code>(0,0,0)</code> as the center and a radius of <code>1</code>.</li><li><code>noiseLoc: SPVec3</code> Position to sample noise values at, defined as <code>pointNormal + vec3(1.2, 1.2, 1.3)</code> as noise generation breaks down at coordinates <code>&lt;=0</code></li><li><code>worldGenOptions: SPWorldGenOptions</code> Options for the world generator, set in the UI when the user is generating a new world.</li><li><code>riverValue: double</code> Used as a crude height multiplier.</li><li><code>riverDistance: double</code> Distance to a nearby river if one is close enough.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can calculate the latitude and longitude as follows:</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> lat </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">asin</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pointNormal</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> lon </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">fabs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pointNormal</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fabs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pointNormal</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">z</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0000001</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        lon </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">atan2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pointNormal</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">z</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pointNormal</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span></code></pre></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Some points are <code>NaN</code>, the vanilla implementation returns <code>NaN</code> at these points. Returning anything else seems to cause artifacts on the equator of the planet.</p></div><p>The return value from te function is a vector with 4 components. The first component is the height, the other components are currently unused and in the vanilla implementation always <code>riverDistance</code>, <code>0</code> and <code>0</code> respectively.</p><h4 id="spreplacespreviousheight" tabindex="-1">spReplacesPreviousHeight <a class="header-anchor" href="#spreplacespreviousheight" aria-label="Permalink to &quot;spReplacesPreviousHeight&quot;">​</a></h4><p>This method has no arguments, when <code>true</code> is returned the output of the previous mod is ignored. If <code>false</code> is returned the output of the previous mod is passed to <code>spHeightGet</code></p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><p>Below is the code for the <code>FlatTerrainMod</code> which returns a height of 10 for every position in the world and generates a planet that has flat terrain.</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SPHeight.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">spReplacesPreviousHeight</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">SPVec4</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">spHeightGet</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">SPVec4</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">previousHeight</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;"> //if spReplacesPreviousHeight returns false, then previousHeight is the output of the previous mod, otherwise it should be ignored.</span></span>
<span class="line"><span style="color:#A6ACCD;">                   </span><span style="color:#FFCB6B;">SPNoise</span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">noise1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                   </span><span style="color:#FFCB6B;">SPNoise</span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">noise2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                   </span><span style="color:#FFCB6B;">SPVec3</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">pointNormal</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                   </span><span style="color:#FFCB6B;">SPVec3</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">noiseLoc</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                   </span><span style="color:#FFCB6B;">SPWorldGenOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">worldGenOptions</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                   </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">riverValue</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                   </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">riverDistance</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    SPVec4 result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;">SP_METERS_TO_PRERENDER</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> riverDistance</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><details class="details custom-block"><summary>Result of the above code</summary><p><img src="`+n+`" alt=""></p></details><h2 id="biome-and-climate-assignment" tabindex="-1">Biome and Climate assignment <a class="header-anchor" href="#biome-and-climate-assignment" aria-label="Permalink to &quot;Biome and Climate assignment&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">Oh-no!</p><p>This section isn&#39;t done. But you can help! Click the &#39;Edit Page&#39; button at the bottom.</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This section mentions the vanilla code several times. You can find it <a href="https://github.com/Majic-Jungle/splugins" target="_blank" rel="noreferrer">here</a>.</p></div><p>Biomes are assigned in this stage of world generation, objects like trees and rocks are placed in this stage of generation.</p><h3 id="objects" tabindex="-1">Objects <a class="header-anchor" href="#objects" aria-label="Permalink to &quot;Objects&quot;">​</a></h3><p>Objects that are common to multiple methods during biome generation.</p><h4 id="spbiomethreadstate" tabindex="-1">SPBiomeThreadState <a class="header-anchor" href="#spbiomethreadstate" aria-label="Permalink to &quot;SPBiomeThreadState&quot;">​</a></h4><p>Allows the biome generator to get indices for various objects generated on the Lua side.</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">SPBiomeThreadState</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> terrainGenerator</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> //private</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> gom</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> //private</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // The following methods can be called to get the index from the lua typeMap for various types of objects.</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">uint16_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">getBiomeTag</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">SPBiomeThreadState</span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">char*</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // Get the index for the given biome tag, eg &quot;hot&quot;. </span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">getTerrainBaseTypeIndex</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">SPBiomeThreadState</span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">char*</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // Get the index for the given terrain base type, eg &quot;riverSand&quot;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">getTerrainVariation</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">SPBiomeThreadState</span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">char*</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // Get the index for the given terrain variation, eg &quot;grassSnow&quot;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">getTerrainModification</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">SPBiomeThreadState</span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">char*</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // Get the index for the given terrain modification, eg &quot;preventGrassAndSnow&quot;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">getGameObjectTypeIndex</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">SPBiomeThreadState</span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">char*</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // Get the index for the given object type, eg &quot;appleTree&quot;. Note that this method can be null and has to be checked for existence</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">getMaterialTypeIndex</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">SPBiomeThreadState</span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">char*</span><span style="color:#89DDFF;">);</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">getDecalGroupTypeIndex</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">SPBiomeThreadState</span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">char*</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#FFCB6B;">SPSurfaceTypeDefault</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">getSurfaceDefaultsForBaseType</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">SPBiomeThreadState</span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">uint32_t</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#FFCB6B;">SPSurfaceTypeDefault</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">getSurfaceDefaultsForVariationType</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">SPBiomeThreadState</span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">uint32_t</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">getSurfaceBaseTypeForFillObjectType</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">SPBiomeThreadState</span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">uint32_t</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	SPRand</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> spRand</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	SPNoise</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> spNoise1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	SPNoise</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> spNoise2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="methods-1" tabindex="-1">Methods <a class="header-anchor" href="#methods-1" aria-label="Permalink to &quot;Methods&quot;">​</a></h3><p>The following methods can be overridden to implement custom biome generation.</p><h4 id="spbiomeinit" tabindex="-1">spBiomeInit <a class="header-anchor" href="#spbiomeinit" aria-label="Permalink to &quot;spBiomeInit&quot;">​</a></h4><ul><li><code>threadState: SPBiomeThreadState*</code></li></ul><p>This method has no return value, the method is used to initialize static variables with indices of the relevant object.</p><h4 id="spbiomegettagsforpoint" tabindex="-1">spBiomeGetTagsForPoint <a class="header-anchor" href="#spbiomegettagsforpoint" aria-label="Permalink to &quot;spBiomeGetTagsForPoint&quot;">​</a></h4><p>It&#39;s currently unknown what this method exactly does. You can help by checking out the vanilla code!</p><h4 id="spbiomegetsurfacetypeforpoint" tabindex="-1">spBiomeGetSurfaceTypeForPoint <a class="header-anchor" href="#spbiomegetsurfacetypeforpoint" aria-label="Permalink to &quot;spBiomeGetSurfaceTypeForPoint&quot;">​</a></h4><p>Allows you to change the surface type on a certain location in the world. For example, you can change how frequent clay, rock, soil, or any other surface generates in the world. If you want to make clay surfaces more common for example, you can increase the chances of clay spawning by modifying this function. You can also use this to spawn your custom surface types into the world.</p><p>Note that this function does not spawn small rocks, boulders, clay balls or anything of that sort. This is merely concerned with the &quot;ground&quot; type that spawns.</p><ul><li><code>SPBiomeThreadState* threadState</code> The state of the thread including noise generators and a RNG object.</li><li><code>SPSurfaceTypeResult incomingType</code> The type as generated by the vanilla code.</li><li><code>uint16_t* tags</code> The type of biome at the current location.</li><li><code>int tagCount</code> Amount of biomes.</li><li><code>uint32_t* modifications</code> Modifications such as if there is snow, or if the soil has vegetation on it or not.</li><li><code>int modificationCount</code> The amount of modification types.</li><li><code>uint32_t fillGameObjectTypeIndex</code> Not sure what this is.</li><li><code>int16_t digFillOffset</code> Not sure what this is.</li><li><code>uint32_t* variations</code> Terrain variations such as red rock, green rock, snow, etc.</li><li><code>SPVec3 pointNormal</code> Coordinates in the world.</li><li><code>SPVec3 noiseLoc</code> A noise value associated with that coordinate.</li><li><code>double baseAltitude</code> The altitude of the coordinate. There is no &quot;absolute minimum&quot; or &quot;absolute maximum&quot;, but running some tests it seems to fall between -0.001 and 0.001, with 0 being the sea level. A value of 0.001 translates to about 4335. 1 meter translates to 0.00000023 units in baseAltitude</li><li><code>double steepness</code> The steepness of that coordinate. It is calculated by taking two other samples 4m away, one to the north, and one to the east, of which the maximum absolute difference between those heights and the base point height in meters is taken.</li><li><code>double riverDistance</code> Distance to the closest river. A river distance of 1 indicates that the nearest river is about 7650 hexagons away</li><li><code>int seasonIndex</code> What season it&#39;s in (?).</li></ul><p>The return value is a <code>SPSurfaceTypeResult</code>. This struct contains the following:</p><ul><li><code>uint32_t surfaceBaseType</code> The type of the surface, such as clay, rock, soil, etc.</li><li><code>uint16_t variationCount</code> Not sure what this is.</li><li><code>uint32_t materialIndex</code> The material (texture) that is associated with the surface type. Changing the surface type is therefore not sufficient, you need to manually set the correct material too.</li><li><code>uint32_t decalTypeIndex</code> Not sure what this is.</li><li><code>uint8_t pathDifficultyIndex</code> Sets the difficulty of traversing this surface.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can convert the steepness value into radians going from 0 to π/2 by doing:</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> angle </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isnan</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">steepness</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">atan</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">steepness </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sqrt</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">));</span></span></code></pre></div></div><h4 id="spbiomegettransientgameobjecttypesforfacesubdivision" tabindex="-1">spBiomeGetTransientGameObjectTypesForFaceSubdivision <a class="header-anchor" href="#spbiomegettransientgameobjecttypesforfacesubdivision" aria-label="Permalink to &quot;spBiomeGetTransientGameObjectTypesForFaceSubdivision&quot;">​</a></h4><p>This method is responsible for spawning gameobjects, this ranges from rocks to trees. Adding gameobjects is done by adding the relevant index (acquired in <code>spBiomeInit</code>) the <code>types</code> array. It&#39;s your responsibility that you write to indices within the range <code>[incomingTypeCount, BIOME_MAX_GAME_OBJECT_COUNT_PER_SUBDIVISION)</code>. Vanilla has a helper macro for this, it requires you to define an integer at the top of the method (<code>int addedCount = incomingTypeCount</code>): Note that this method is called for all mods enabled (this includes vanilla!) and you can thus already have gameobjects in the <code>types</code> array. It&#39;s possible to overwrite previous mods by overwriting previous indices.</p><ul><li><code>threadState SPBiomeThreadState*</code> The state of the thread including noise generators and a RNG object.</li><li><code>incomingTypeCount: int</code> Amount of already generated objects</li><li><code>types: uint32_t*</code> Array of types to be generated with size <code>BIOME_MAX_GAME_OBJECT_COUNT_PER_SUBDIVISION</code>.</li><li><code>biomeTags: uint16_t*</code>Array of biome tags at the position to generate.</li><li><code>tagCount: int</code> Amount of biome tags at the position to generate</li><li><code>pointNormal: SPVec3</code></li><li><code>noiseLoc: SPVec3</code> Location to be used in conjunction with the given noiseGenerator.</li><li><code>faceUniqueID: uint64_t</code> The unique id of the face, can be used to get random values.</li><li><code>level: int</code> The level of subdivisions the face has undergone. The higher this value, the denser that gameObjects will be placed. The method is called only for the following levels of subdivision: 13, 14, 15, 16, 17, 18, 19, 20, 21</li><li><code>altitude: double</code> Altitude of the face</li><li><code>steepness: double</code> The steepness of that coordinate. It is calculated by taking two other samples 4m away, one to the north, and one to the east, of which the maximum absolute difference between those heights and the base point height in meters is taken.</li><li><code>riverDistance: double</code></li></ul><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ADD_OBJECT</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">__addType__</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">                                                \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  types[addedCount++] = __addType__;                                           \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  if (addedCount &gt;= BIOME_MAX_GAME_OBJECT_COUNT_PER_SUBDIVISION) {             \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    return addedCount;                                                         \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span></code></pre></div><p>Vanilla spawns different kinds of objects at different subdivision levels, look at the vanilla code for specifics.</p><h2 id="particle-engine" tabindex="-1">Particle Engine <a class="header-anchor" href="#particle-engine" aria-label="Permalink to &quot;Particle Engine&quot;">​</a></h2><p>It&#39;s currently unknown how the particle engine works, the vanilla implementation can be found in the <a href="https://github.com/Majic-Jungle/splugins/blob/main/SPVanilla/src/SPParticles.c" target="_blank" rel="noreferrer">splugins</a> repository.</p>`,61),p=[l];function c(i,r,d,y,h,F){return e(),a("div",null,p)}const C=s(t,[["render",c]]);export{u as __pageData,C as default};
