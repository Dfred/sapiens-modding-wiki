import{_ as s,c as n,o as a,d as o}from"./app.289883e3.js";const C=JSON.parse('{"title":"Lua Shadows","description":"","frontmatter":{},"headers":[{"level":2,"title":"File Structure","slug":"file-structure","link":"#file-structure","children":[]},{"level":2,"title":"Overriding Attributes","slug":"overriding-attributes","link":"#overriding-attributes","children":[]},{"level":2,"title":"Overriding Public Functions","slug":"overriding-public-functions","link":"#overriding-public-functions","children":[{"level":3,"title":"Notes","slug":"notes","link":"#notes","children":[]}]},{"level":2,"title":"Limitations","slug":"limitations","link":"#limitations","children":[{"level":3,"title":"Working around Limitations","slug":"working-around-limitations","link":"#working-around-limitations","children":[]}]},{"level":2,"title":"Bootstrapping","slug":"bootstrapping","link":"#bootstrapping","children":[]}],"relativePath":"guide/shadowing.md","lastUpdated":1686225764000}'),l={name:"guide/shadowing.md"},e=o(`<h1 id="lua-shadows" tabindex="-1">Lua Shadows <a class="header-anchor" href="#lua-shadows" aria-hidden="true">#</a></h1><p>Mods that wish to override or add Lua code can do so by creating their Lua files in a directory structure that mirrors the game&#39;s scripts directory.</p><p>For example, if you wanted to override something in <code>world.lua</code>, you would place a file in <code>MOD/scripts/mainThread/world.lua</code>.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Shadows are more complex than just copying/pasting the game&#39;s source files and editing them. Please read further to understand how you can use Shadowing to manipulate game logic!</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If you&#39;re using Hammerstone, there is a <a href="/hammerstone/shadowing.html">shadowing utility</a>, which provides a nicer syntax for shadowing.</p></div><h2 id="file-structure" tabindex="-1">File Structure <a class="header-anchor" href="#file-structure" aria-hidden="true">#</a></h2><p>Once you&#39;ve created your Lua file, you must add some mandatory structure. This example will show a shadow for <code>world.lua</code>:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre><code><span class="line"><span style="color:#676E95;">-- You can call the module anything you want, but the convention is to use &#39;mod&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> mod </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">    loadOrder </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">-- The load order determines which mods get loaded first.</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">-- This function will be called the first time\`&#39;world.lua\` is \`mjrequired\`. The \`world\` argument represents the original Lua module, defined in Sapiens codebase:</span></span>
<span class="line"><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mod</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">onload</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> mod</span></span>
<span class="line"></span></code></pre></div><p>As you can see, all you need to do is create a new Lua module and define a particular function called <code>onload</code>, which takes a single argument representing the original Lua module.</p><h2 id="overriding-attributes" tabindex="-1">Overriding Attributes <a class="header-anchor" href="#overriding-attributes" aria-hidden="true">#</a></h2><p>In Lua an attribute is a property which is defined directly in the module definition. For example, in <code>world.lua</code> you will find:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre><code><span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> world </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">	isVR </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	hasUsedMultiselect </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div><p>To change a property using a shadow, you would do something like this:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre><code><span class="line"><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mod</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">onload</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	world.</span><span style="color:#FFCB6B;">isVR</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><h2 id="overriding-public-functions" tabindex="-1">Overriding Public Functions <a class="header-anchor" href="#overriding-public-functions" aria-hidden="true">#</a></h2><p>In Lua public functions are defined like this:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre><code><span class="line"><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">world</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">togglePause</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">	isTemporaryPauseForPopup </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#FFCB6B;">tutorialUI</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">playerToggledPause</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> speedMultiplierIndex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">world</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">getSpeedMultiplierIndex</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> speedMultiplierIndex </span><span style="color:#89DDFF;">~=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#FFCB6B;">logicInterface</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">callServerFunction</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setPaused</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">true</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#FFCB6B;">logicInterface</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">callServerFunction</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setPaused</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">false</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><p>Let&#39;s investigate how we can &#39;shadow&#39; this function:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre><code><span class="line"><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mod</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">onload</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;">-- Store a copy of the original function. Prefixing &#39;super&#39; is convention.</span></span>
<span class="line"><span style="color:#A6ACCD;">	superTogglePause </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> world.</span><span style="color:#FFCB6B;">togglePause</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;">-- Redefine the function</span></span>
<span class="line"><span style="color:#A6ACCD;">	world.</span><span style="color:#FFCB6B;">togglePause</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#FFCB6B;">mj</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">You can run any logic you want here :)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">		</span><span style="color:#676E95;">-- You should generally call &#39;super&#39; after or before your custom logic</span></span>
<span class="line"><span style="color:#89DDFF;">		</span><span style="color:#676E95;">-- to ensure that you don&#39;t break sapiens functionality.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#82AAFF;">superTogglePause</span><span style="color:#A6ACCD;">(self)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><h3 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-hidden="true">#</a></h3><ol><li>While it isn&#39;t <em>required</em> to stop and call the super, if you don&#39;t, the base functionality of Sapiens will be completely absent.</li><li>There exists an equivalent syntax for overriding functions using the <code>world:togglePause</code> syntax. However it&#39;s against conventions, as it hides the fact that a function is being overridden.</li></ol><h2 id="limitations" tabindex="-1">Limitations <a class="header-anchor" href="#limitations" aria-hidden="true">#</a></h2><p>The shadowing system in sapiens is not arbitrarily powerful. It has a few limitations, making it difficult or impossible to work with.</p><p>First and foremost, you cannot override or manipulate local functions or variables. For example, in <code>world.lua</code>, there exists code like this:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre><code><span class="line"><span style="color:#676E95;">-- This cannot be accessed via &#39;world.hasQueuedResearchPlan&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> hasQueuedResearchPlan </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">-- This cannot be accessed via &#39;world.setTimeFromSunRotation&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setTimeFromSunRotation</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">sunRotation</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#FFCB6B;">logicInterface</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">callServerFunction</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setTimeFromSunRotation</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, {</span></span>
<span class="line"><span style="color:#A6ACCD;">		rotation </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> sunRotation</span></span>
<span class="line"><span style="color:#A6ACCD;">	})</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><h3 id="working-around-limitations" tabindex="-1">Working around Limitations <a class="header-anchor" href="#working-around-limitations" aria-hidden="true">#</a></h3><p>This limitation can be mitigated by understanding that local functions and variables are ONLY used within the actual file they are defined in.</p><p>By definition, it&#39;s possible to replace these local definitions &quot;implicitly&quot;, by shadowing and redefining all usages.</p><p>For example, if <code>local foo</code> is called in <code>world:bar</code> and <code>world:baz</code>, it will be possible to shadow these two exposed functions and therefor rewrite them, so they don&#39;t call <code>foo</code>, or call a local, modified version in your own file.</p><p>This isn&#39;t considered sustainable though!</p><h2 id="bootstrapping" tabindex="-1">Bootstrapping <a class="header-anchor" href="#bootstrapping" aria-hidden="true">#</a></h2><p>Every mod will require at least one shadow to &quot;bootstrap&quot; the rest of your code. If you just write your own Lua code, the game will never know it exists and thus will never execute it.</p><p><em>Note: Realistically, you need at least one shadow per Lua thread to bootstrap cross-thread logic.</em></p><p>Once bootstrapped though, it&#39;s entirely possible (and desirable!) to write your logic in its own file instead of shoe-horning it into shadows.</p><p>To do this, you simply shadow a file (such as <code>controller.lua</code>) for the purpose of calling <code>init</code> methods on your other files:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre><code><span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> mod </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">	loadOrder </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mjrequire</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo/bar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mod</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">onload</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">controller</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#FFCB6B;">foo</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">init</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> mod</span></span>
<span class="line"></span></code></pre></div>`,36),p=[e];function t(r,c,i,d,y,u){return a(),n("div",null,p)}const F=s(l,[["render",t]]);export{C as __pageData,F as default};
