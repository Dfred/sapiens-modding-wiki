import{_ as e,c as t,o as a,d as i}from"./app.54045823.js";const f=JSON.parse('{"title":"User Interface","description":"","frontmatter":{},"headers":[{"level":2,"title":"Getting Started","slug":"getting-started","link":"#getting-started","children":[]},{"level":2,"title":"UI Types","slug":"ui-types","link":"#ui-types","children":[{"level":3,"title":"View","slug":"view","link":"#view","children":[]},{"level":3,"title":"Model View","slug":"model-view","link":"#model-view","children":[]}]}],"relativePath":"docs/visuals/user-interface.md","lastUpdated":1664321640000}'),o={name:"docs/visuals/user-interface.md"},d=i('<h1 id="user-interface" tabindex="-1">User Interface <a class="header-anchor" href="#user-interface" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>We recommend you use Hammerstone for managing UI. You can find the Hammerstone docs <a href="/hammerstone/ui-manager.html">here</a></p></div><p>UI in Sapiens relies on a few different things. This page will somewhat just introduce the vocabulary, and show a quick example.</p><h2 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-hidden="true">#</a></h2><p>To get started, you should start with an entry point that contains UI that you can hook into, for example the <code>gameUI</code>.</p><p>Then, you can start your view: <code>mainView = View.new(gameUI.view)</code>. Every time you create a new View, pass in your parent view as the first argument.</p><p><code>Note:</code> <code>View</code> and other kinds of Views such as <code>ImageView</code> are not defined in lua. Just use them.</p><p>On each view you can set fields such as:</p><ul><li><code>Hidden</code> : <code>bool</code></li><li><code>RelativePosition</code>: <code>ViewPosition</code></li><li><code>size</code> : <code>vec2</code></li></ul><h2 id="ui-types" tabindex="-1">UI Types <a class="header-anchor" href="#ui-types" aria-hidden="true">#</a></h2><h3 id="view" tabindex="-1">View <a class="header-anchor" href="#view" aria-hidden="true">#</a></h3><p>Blank slate, like <code>div</code></p><h3 id="model-view" tabindex="-1">Model View <a class="header-anchor" href="#model-view" aria-hidden="true">#</a></h3><p>Render a model. Useful for creating background plates.</p>',14),s=[d];function n(r,c,l,h,u,p){return a(),t("div",null,s)}const w=e(o,[["render",n]]);export{f as __pageData,w as default};
