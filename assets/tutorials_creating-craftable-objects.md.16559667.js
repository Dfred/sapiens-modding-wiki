import{_ as s,c as a,o as n,d as l}from"./app.c45ca641.js";const F=JSON.parse('{"title":"Craftable object in Lua","description":"","frontmatter":{},"headers":[{"level":2,"title":"Getting started","slug":"getting-started","link":"#getting-started","children":[]},{"level":2,"title":"Defining a gameObject","slug":"defining-a-gameobject","link":"#defining-a-gameobject","children":[]},{"level":2,"title":"Defining a model and a material","slug":"defining-a-model-and-a-material","link":"#defining-a-model-and-a-material","children":[]},{"level":2,"title":"Defining a resource","slug":"defining-a-resource","link":"#defining-a-resource","children":[]},{"level":2,"title":"Adding to a storage","slug":"adding-to-a-storage","link":"#adding-to-a-storage","children":[]},{"level":2,"title":"Adding a craftable recipe","slug":"adding-a-craftable-recipe","link":"#adding-a-craftable-recipe","children":[]},{"level":2,"title":"Conclusion","slug":"conclusion","link":"#conclusion","children":[{"level":3,"title":"My code does not work","slug":"my-code-does-not-work","link":"#my-code-does-not-work","children":[]}]}],"relativePath":"tutorials/creating-craftable-objects.md","lastUpdated":1672275719000}'),o={name:"tutorials/creating-craftable-objects.md"},p=l(`<h1 id="craftable-object-in-lua" tabindex="-1">Craftable object in Lua <a class="header-anchor" href="#craftable-object-in-lua" aria-hidden="true">#</a></h1><p>In this tutorial, we will create a small mod that adds charcoal as a craftable object to the game. It is based on a minimal <a href="https://github.com/nmattela/sapiens_coal_mod" target="_blank" rel="noreferrer">Coal mod</a>. This tutorial is written for update 0.3.8. It is possible that this tutorial will not work for future updates.</p><h2 id="getting-started" tabindex="-1">Getting started <a class="header-anchor" href="#getting-started" aria-hidden="true">#</a></h2><p>To get started, follow the <a href="/guide/lua-getting-started.html">Getting Started with Lua</a> guide. This tutorial also uses the <a href="/hammerstone/introduction.html">Hammerstone Framework</a> to make your life a bit easier. Optionally, you can also install <a href="https://github.com/SirLich/sapiens-creative-mode" target="_blank" rel="noreferrer">Creative Mode</a> to make debugging and testing a bit faster.</p><p>I assume you have shadowed <code>scripts/mainThread/controller.lua</code> and created a directory called <code>scripts/&lt;yourName&gt;/coal.lua</code>. In this file, add the following content:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre><code><span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> coal </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">coal</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">init</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">mj</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Initializing the Coal mod...</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">mj</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Coal mod initialized!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> coal</span></span>
<span class="line"></span></code></pre></div><p>That&#39;s it! Congratulations, you made your first mod! Just kidding... Obviously your mod doesn&#39;t do anything. For that, we will have to shadow a couple more files. If you&#39;re unfamiliar with the concept of shadowing, <a href="/guide/shadowing.html">consult this guide</a>. Also, make sure to have the game&#39;s source code open as well to consult. You can find it in <code>SteamLibrary/steamapps/common/Sapiens/GameResources</code>. Check Steam settings on what disk your SteamLibrary is located.</p><h2 id="defining-a-gameobject" tabindex="-1">Defining a gameObject <a class="header-anchor" href="#defining-a-gameobject" aria-hidden="true">#</a></h2><p>Create the directory <code>scripts/common</code>. We will start by adding a charcoal object to the game. We do so by creating the file <code>scripts/common/gameObject.lua</code>. Like every other file in <code>scripts/common</code>, begin by creating the module, importing some files, and declaring the <code>onload</code> function:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre><code><span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> mod </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">    loadOrder </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> resource </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mjrequire</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">common/resource</span><span style="color:#89DDFF;">&quot; </span><span style="color:#676E95;">-- &lt;- mjrequire imports files from either the source code, your mod, or from another mod, depending on the hierarchy of mod loads.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> mjm </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mjrequire</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">common/mjm</span><span style="color:#89DDFF;">&quot; </span><span style="color:#676E95;">-- &lt;- mjm contains some functions to work with vectors</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> vec3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mjm.</span><span style="color:#FFCB6B;">vec3</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> mat3Identity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mjm.</span><span style="color:#FFCB6B;">mat3Identity</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> mat3Rotate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mjm.</span><span style="color:#FFCB6B;">mat3Rotate</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mod</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">onload</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">gameObject</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> super_mjInit </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gameObject.</span><span style="color:#FFCB6B;">mjInit</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">-- &lt;- Store the current value of mjInit in a local variable because we will be overriding it but still need to call it</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    gameObject.</span><span style="color:#FFCB6B;">mjInit</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">-- &lt;- mjInit gets called on initialization</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;">-- Do something --</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">super_mjInit</span><span style="color:#A6ACCD;">(self) </span><span style="color:#676E95;">-- &lt;- VERY IMPORTANT!!!! DO NOT FORGET TO ALWAYS CALL THE SUPER OR THINGS MAY BREAK!!!</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> mod </span><span style="color:#676E95;">-- &lt;- Equally important</span></span>
<span class="line"></span></code></pre></div><p>With this boilerplating done, we can add a gameObject. Put the following code in place of the <code>-- Do something --</code> comment in <code>gameObject.mjInit</code>:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre><code><span class="line"><span style="color:#FFCB6B;">gameObject</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">addGameObject</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">charcoal</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, {</span></span>
<span class="line"><span style="color:#A6ACCD;">    modelName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">charcoal</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;">-- &lt;- This references a model we have yet to define</span></span>
<span class="line"><span style="color:#A6ACCD;">    name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">charcoal</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;">-- &lt;- Do not do this if you want to support localization with your mod. Check out localization for more info</span></span>
<span class="line"><span style="color:#A6ACCD;">    plural </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">charcoals</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;">-- &lt;- Idem</span></span>
<span class="line"><span style="color:#A6ACCD;">    scale </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.0</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    hasPhysics </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    resourceTypeIndex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> resource.</span><span style="color:#FFCB6B;">types</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">charcoal</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">index</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;">-- &lt;- This references a resource we have yet to define</span></span>
<span class="line"><span style="color:#A6ACCD;">    objectViewRotationFunction </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">object</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mat3Rotate</span><span style="color:#A6ACCD;">(mat3Identity, </span><span style="color:#F78C6C;">0.1</span><span style="color:#A6ACCD;">, </span><span style="color:#82AAFF;">vec3</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1.0</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">0.0</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">0.0</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    markerPositions </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        {</span></span>
<span class="line"><span style="color:#A6ACCD;">            worldOffset </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">vec3</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0.0</span><span style="color:#A6ACCD;">, </span><span style="color:#FFCB6B;">mj</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">mToP</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0.2</span><span style="color:#A6ACCD;">), </span><span style="color:#F78C6C;">0.0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    },</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span>
<span class="line"></span></code></pre></div><p>As you can see, there are quite a few parameters to tweak with. These all define the behavior of your gameObject. Go and have some fun and experiment with them a bit (once your code runs of course).</p><p>This is already a good start, but as the comments explain, there are some more things we need to do to make this gameObject come to life. Specifically, we still have to define a model and a resource (and other things too).</p><h2 id="defining-a-model-and-a-material" tabindex="-1">Defining a model and a material <a class="header-anchor" href="#defining-a-model-and-a-material" aria-hidden="true">#</a></h2><p>In Sapiens, a model is the visual representation of a gameObject (or other kinds of resources). It is stored in the game&#39;s files as a <code>.glb</code> file, which is a 3D model file that can be created using a program such as Blender.</p><p>As I am not talented enough to work with Blender, I am simply going to copy the <code>models/rock1.glb</code> file from the game&#39;s source code and paste it into my mod directory under <code>models/charcoal.glb</code> (you will have to create the <code>models/</code> directory first). You can of course create your own model.</p><p>We then register this model in <code>scripts/common/model.lua</code>:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre><code><span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> mod </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">    loadOrder </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mod</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">onload</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">model</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    model.</span><span style="color:#FFCB6B;">remapModels</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">dirt</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">charcoal</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        dirt </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">charcoal</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> mod</span></span>
<span class="line"></span></code></pre></div><p>It sounds quite random that we have to remap <code>dirt</code>, but my two cents is that <code>dirt</code> refers to the shape of the item, as all items that fall under this dirt category (rock, clay, etc.) have similar model shapes.</p><p>We can define the texture of this model in <code>scripts/common/material.lua</code>:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre><code><span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> mod </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">    loadOrder </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> mjm </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mjrequire</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">common/mjm</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> vec3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mjm.</span><span style="color:#FFCB6B;">vec3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mod</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">onload</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">material</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">mj</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">insertIndexed</span><span style="color:#A6ACCD;">(material.</span><span style="color:#FFCB6B;">types</span><span style="color:#A6ACCD;">, {</span></span>
<span class="line"><span style="color:#A6ACCD;">        key </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">charcoal</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        color </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">vec3</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0.035</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">0.027</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">0.016</span><span style="color:#A6ACCD;">), </span><span style="color:#676E95;">-- &lt;-- You can change its color if you&#39;d like</span></span>
<span class="line"><span style="color:#A6ACCD;">        roughness </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.1</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        metal </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.1</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        colorB </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">vec3</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        roughnessB </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.9</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        metalB </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.1</span></span>
<span class="line"><span style="color:#A6ACCD;">    })</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> mod</span></span>
<span class="line"></span></code></pre></div><h2 id="defining-a-resource" tabindex="-1">Defining a resource <a class="header-anchor" href="#defining-a-resource" aria-hidden="true">#</a></h2><p>Sapiens has different types of resources: food, weapons, tools, and other items. These are all referenced in <code>scripts/resource.lua</code>. We will have to add our charcoal gameObject to that list. Do so by creating <code>scripts/resource.lua</code> in your mod directory, and defining the <code>mod</code> module, the function <code>mod:onload</code> and some imports like we did before:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre><code><span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> mod </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">    loadOrder </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> locale </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mjrequire</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">common/locale</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> typeMaps </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mjrequire</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">common/typeMaps</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mod</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">onload</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">resource</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> super_mjInit </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> resource.</span><span style="color:#FFCB6B;">mjInit</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">-- &lt;- Like before, we store the old mjInit value so we can call it inside our own mjInit</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> gameObjectTypeIndexMap </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> typeMaps.</span><span style="color:#FFCB6B;">types</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">gameObject</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">-- &lt;- We need the gameObject typeMap. typeMaps can be imported using</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">-- Do something --</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> mod</span></span>
<span class="line"></span></code></pre></div><p>In the <code>onload</code> function, replace <code>-- Do something --</code> with the following code:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre><code><span class="line"><span style="color:#A6ACCD;">resource.</span><span style="color:#FFCB6B;">mjInit</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">super_mjInit</span><span style="color:#A6ACCD;">(self) </span><span style="color:#676E95;">-- &lt;- Here, we call the super first instead of last. This is because our charcoal relies on other resources to be loaded in first, such as the campfire.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">resource</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">addResource</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">charcoal</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, { </span><span style="color:#676E95;">-- &lt;- Here, we will leverage on a Hammerstone functionality to more easily add resources</span></span>
<span class="line"><span style="color:#A6ACCD;">        name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">charcoal</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;">-- &lt;- Again, do not do this if you want to support localization</span></span>
<span class="line"><span style="color:#A6ACCD;">        plural </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">charcoals</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;">-- &lt;- Idem</span></span>
<span class="line"><span style="color:#A6ACCD;">        displayGameObjectTypeIndex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gameObjectTypeIndexMap.</span><span style="color:#FFCB6B;">charcoal</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">-- &lt;- Fetch our gameObject by its ID (charcoal)</span></span>
<span class="line"><span style="color:#A6ACCD;">    })</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><p>Now, we have added charcoal as a resource. But we would like to tell Sapiens that charcoal can be used as fuel for campfires. For that, we will have to reference this resource in the resourceGroup for campfires. Add this code right after the previous code:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre><code><span class="line"><span style="color:#FFCB6B;">resource</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">addResourceGroup</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">campfireFuel</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, { </span><span style="color:#676E95;">-- &lt;- campfireFuel already exists, but we will override it with our own custom implementation</span></span>
<span class="line"><span style="color:#A6ACCD;">    name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">locale</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">resource_group_campfireFuel</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">), </span><span style="color:#676E95;">-- &lt;- This is how localization is properly handled</span></span>
<span class="line"><span style="color:#A6ACCD;">    plural </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">locale</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">resource_group_campfireFuel_plural</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">    resourceTypes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        resource.</span><span style="color:#FFCB6B;">types</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">branch</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">index</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;">-- &lt;- Same as in source code</span></span>
<span class="line"><span style="color:#A6ACCD;">        resource.</span><span style="color:#FFCB6B;">types</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">log</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">index</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;">-- &lt;- Idem</span></span>
<span class="line"><span style="color:#A6ACCD;">        resource.</span><span style="color:#FFCB6B;">types</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">pineCone</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">index</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;">-- &lt;- Idem</span></span>
<span class="line"><span style="color:#A6ACCD;">        resource.</span><span style="color:#FFCB6B;">types</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">pineConeBig</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">index</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;">-- &lt;- Idem</span></span>
<span class="line"><span style="color:#A6ACCD;">        resource.</span><span style="color:#FFCB6B;">types</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">charcoal</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">index</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;">-- &lt;- This is new</span></span>
<span class="line"><span style="color:#A6ACCD;">    },</span></span>
<span class="line"><span style="color:#A6ACCD;">    containsTypesHash </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {},</span></span>
<span class="line"><span style="color:#A6ACCD;">    displayGameObjectTypeIndex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gameObjectTypeIndexMap.</span><span style="color:#FFCB6B;">birchBranch</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span>
<span class="line"></span></code></pre></div><p>You can do the same for <code>kilnFuel</code> and <code>torchFuel</code>, if you&#39;d like.</p><h2 id="adding-to-a-storage" tabindex="-1">Adding to a storage <a class="header-anchor" href="#adding-to-a-storage" aria-hidden="true">#</a></h2><p>If you have read the source code for <code>resource.lua</code>, you likely have seen this comment: <code>WHEN ADDING RESOURCE TYPES: Dont forget to add to storage.lua</code>. That&#39;s right, just when you thought everything was complete, we still need to tie some loose ends. Again, create the file <code>scripts/common/storage.lua</code>:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre><code><span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> mod </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">    loadOrder </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> typeMaps </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mjrequire</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">common/typeMaps</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> resource </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mjrequire</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">common/resource</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> rng </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mjrequire</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">common/randomNumberGenerator</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> mjm </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mjrequire</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">common/mjm</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> vec3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mjm.</span><span style="color:#FFCB6B;">vec3</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> mat3Rotate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mjm.</span><span style="color:#FFCB6B;">mat3Rotate</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> mat3Identity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mjm.</span><span style="color:#FFCB6B;">mat3Identity</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mod</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">onload</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">storage</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">-- &lt;- This time, we will not override mjInit. To be honest, I am not certain why, but if you do override mjInit, things will break :/</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">-- Do something --</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> mod</span></span>
<span class="line"></span></code></pre></div><p>Replace <code>-- Do something --</code> with:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre><code><span class="line"><span style="color:#FFCB6B;">storage</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">addStorage</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">charcoal</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, { </span><span style="color:#676E95;">-- &lt;- Again, we rely on Hammerstone here</span></span>
<span class="line"><span style="color:#A6ACCD;">    name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">charcoal</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    displayGameObjectTypeIndex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> typeMaps.</span><span style="color:#FFCB6B;">types</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">gameObject</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">charcoal</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;">-- &lt;- reference gameObject</span></span>
<span class="line"><span style="color:#A6ACCD;">    resources </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        resource.</span><span style="color:#FFCB6B;">types</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">charcoal</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">index</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;">-- &lt;- Reference resource</span></span>
<span class="line"><span style="color:#A6ACCD;">    },</span></span>
<span class="line"><span style="color:#A6ACCD;">    storageBox </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> { </span><span style="color:#676E95;">-- &lt;- How the gameObject looks like when it is stored</span></span>
<span class="line"><span style="color:#A6ACCD;">        size </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">vec3</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0.1</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">0.1</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">0.1</span><span style="color:#A6ACCD;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        rotationFunction </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">uniqueID</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">seed</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> randomValue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">rng</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">valueForUniqueID</span><span style="color:#A6ACCD;">(uniqueID, seed)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> rotation </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mat3Rotate</span><span style="color:#A6ACCD;">(mat3Identity, randomValue </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6.282</span><span style="color:#A6ACCD;">, </span><span style="color:#82AAFF;">vec3</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0.0</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">1.0</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">0.0</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">            rotation </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mat3Rotate</span><span style="color:#A6ACCD;">(rotation, randomValue </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6.282</span><span style="color:#A6ACCD;">, </span><span style="color:#82AAFF;">vec3</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1.0</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">0.0</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">0.0</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> rotation</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    },</span></span>
<span class="line"><span style="color:#A6ACCD;">    maxCarryCount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;">-- &lt;- How much charcoal can a Sapiens carry at a time?</span></span>
<span class="line"><span style="color:#A6ACCD;">    maxCarryCountLimitedAbility </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;">-- &lt;- Idem but for kids, pregnant women and elderly</span></span>
<span class="line"><span style="color:#A6ACCD;">    maxCarryCountForRunning </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;">-- &lt;- Idem but when a Sapien is running (e.g. from a mammoth)</span></span>
<span class="line"><span style="color:#A6ACCD;">    carryType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> storage.</span><span style="color:#FFCB6B;">carryTypes</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">small</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    carryOffset </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">vec3</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0.0</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">0.01</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">0.0</span><span style="color:#A6ACCD;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span>
<span class="line"></span></code></pre></div><p>Great! Our charcoal has been added to the game! However, it is not yet obtainable because it lacks a crafting recipe. Let&#39;s add that.</p><h2 id="adding-a-craftable-recipe" tabindex="-1">Adding a craftable recipe <a class="header-anchor" href="#adding-a-craftable-recipe" aria-hidden="true">#</a></h2><p>Charcoal can be crafted in a campfire by using 3 branches which give you 2 charcoal (game balance is beyond the scope of this tutorial). We will describe this in a crafting recipe.</p><p>Let&#39;s start with the boilerplating again. This time, the boilerplating is a bit larger because we copy/paste some functions and constants from the source code that describe a crafting animation for food, which we will be using for the crafting animation of charcoal (I am lazy and don&#39;t know how to animate).</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre><code><span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> mod </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">    loadOrder </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> mjm </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mjrequire</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">common/mjm</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> vec3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mjm.</span><span style="color:#FFCB6B;">vec3</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> vec3xMat3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mjm.</span><span style="color:#FFCB6B;">vec3xMat3</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> mat3Identity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mjm.</span><span style="color:#FFCB6B;">mat3Identity</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> mat3Rotate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mjm.</span><span style="color:#FFCB6B;">mat3Rotate</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> mat3Inverse </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mjm.</span><span style="color:#FFCB6B;">mat3Inverse</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> gameObject </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mjrequire</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">common/gameObject</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> constructable </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mjrequire</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">common/constructable</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> actionSequence </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mjrequire</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">common/actionSequence</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> skill </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mjrequire</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">common/skill</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> resource </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mjrequire</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">common/resource</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> craftAreaGroup </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mjrequire</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">common/craftAreaGroup</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">-- Begin copy/paste from source code --</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> cookingStickRotationOffset </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mat3Inverse</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">mat3Rotate</span><span style="color:#A6ACCD;">(mat3Identity, </span><span style="color:#89DDFF;">math.pi</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.25</span><span style="color:#A6ACCD;">, </span><span style="color:#82AAFF;">vec3</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0.0</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">1.0</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">0.0</span><span style="color:#A6ACCD;">))) </span><span style="color:#676E95;">-- &lt;- We use the same animation as cooking food because I am lazy and don&#39;t know how to animate stuff</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> cookingStickRotation </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mat3Rotate</span><span style="color:#A6ACCD;">(mat3Identity, </span><span style="color:#89DDFF;">-math.pi</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">math.pi</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.25</span><span style="color:#A6ACCD;">, </span><span style="color:#82AAFF;">vec3</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0.0</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">1.0</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">0.0</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> actionSequenceRepeatCountSlowerCompletion </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createStandardBuildSequence</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">actionSequenceTypeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">requiredToolIndex</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">repeatCountOrNil</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">-- &lt;- Step-by-step explanation of how the animation goes</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        {</span></span>
<span class="line"><span style="color:#A6ACCD;">            constructableSequenceTypeIndex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> constructable.</span><span style="color:#FFCB6B;">sequenceTypes</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">clearIncorrectResources</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">index</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        },</span></span>
<span class="line"><span style="color:#A6ACCD;">        {</span></span>
<span class="line"><span style="color:#A6ACCD;">            constructableSequenceTypeIndex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> constructable.</span><span style="color:#FFCB6B;">sequenceTypes</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">clearObjects</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">index</span></span>
<span class="line"><span style="color:#A6ACCD;">        },</span></span>
<span class="line"><span style="color:#A6ACCD;">        {</span></span>
<span class="line"><span style="color:#A6ACCD;">            constructableSequenceTypeIndex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> constructable.</span><span style="color:#FFCB6B;">sequenceTypes</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">bringResources</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">index</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        },</span></span>
<span class="line"><span style="color:#A6ACCD;">        {</span></span>
<span class="line"><span style="color:#A6ACCD;">            constructableSequenceTypeIndex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> constructable.</span><span style="color:#FFCB6B;">sequenceTypes</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">bringTools</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">index</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        },</span></span>
<span class="line"><span style="color:#A6ACCD;">        {</span></span>
<span class="line"><span style="color:#A6ACCD;">            constructableSequenceTypeIndex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> constructable.</span><span style="color:#FFCB6B;">sequenceTypes</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">moveComponents</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">index</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        },</span></span>
<span class="line"><span style="color:#A6ACCD;">        {</span></span>
<span class="line"><span style="color:#A6ACCD;">            constructableSequenceTypeIndex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> constructable.</span><span style="color:#FFCB6B;">sequenceTypes</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">actionSequence</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">index</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            actionSequenceTypeIndex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> actionSequenceTypeIndex,</span></span>
<span class="line"><span style="color:#A6ACCD;">            requiredToolIndex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> requiredToolIndex,</span></span>
<span class="line"><span style="color:#A6ACCD;">            disallowCompletionWithoutSkill </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            repeatCount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> repeatCountOrNil </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> actionSequenceRepeatCountSlowerCompletion,</span></span>
<span class="line"><span style="color:#A6ACCD;">        },</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#676E95;">-- End copy/paste from source code --</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mod</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">onload</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">craftable</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    super_load </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> craftable.</span><span style="color:#FFCB6B;">load</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">-- &lt;- We will now be overriding load instead of mjInit. Again, not sure why</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">-- Do something --</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> mod</span></span>
<span class="line"></span></code></pre></div><p>Then, replace <code>-- Do something --</code> with:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre><code><span class="line"><span style="color:#A6ACCD;">craftable.</span><span style="color:#FFCB6B;">load</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">gameObject</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">flora</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">super_load</span><span style="color:#A6ACCD;">(self, gameObject, flora) </span><span style="color:#676E95;">-- &lt;- Call the super first</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">constructable</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">addConstructable</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">charcoal</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, {</span></span>
<span class="line"><span style="color:#A6ACCD;">        name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">charcoal</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        plural </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">charcoals</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        summary </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Charcoal is a fuel that lasts longer than branches or logs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        iconGameObjectType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gameObject.</span><span style="color:#FFCB6B;">typeIndexMap</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">charcoal</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        classification </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> constructable.</span><span style="color:#FFCB6B;">classifications</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">craft</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">index</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        isFoodPreperation </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;">-- &lt;- I know it&#39;s not, but otherwise we cannot use a campfire to make our charcoal</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        outputObjectInfo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> { </span><span style="color:#676E95;">-- &lt;- What the crafting result is. In our case, 2 charcoals</span></span>
<span class="line"><span style="color:#A6ACCD;">            objectTypesArray </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">                gameObject.</span><span style="color:#FFCB6B;">typeIndexMap</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">charcoal</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                gameObject.</span><span style="color:#FFCB6B;">typeIndexMap</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">charcoal</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">        },</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        outputDisplayCount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        buildSequence </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createStandardBuildSequence</span><span style="color:#A6ACCD;">(actionSequence.</span><span style="color:#FFCB6B;">types</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">fireStickCook</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">index</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        inProgressBuildModel </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">craftSimple</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        skills </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">            required </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> skill.</span><span style="color:#FFCB6B;">types</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">fireLighting</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">index</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;">-- &lt;- We require that the Sapien knows fire lighting before it can craft charcoal</span></span>
<span class="line"><span style="color:#A6ACCD;">        },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        requiredResources </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> { </span><span style="color:#676E95;">-- &lt;- The ingredients for the crafting recipe. In our case, 3 branches</span></span>
<span class="line"><span style="color:#A6ACCD;">            {</span></span>
<span class="line"><span style="color:#A6ACCD;">                type </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> resource.</span><span style="color:#FFCB6B;">types</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">branch</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">index</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            },</span></span>
<span class="line"><span style="color:#A6ACCD;">        },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        requiredCraftAreaGroups </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">            craftAreaGroup.</span><span style="color:#FFCB6B;">types</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">campfire</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">index</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;">-- &lt;- Only allow charcoal to be crafted at a campfire</span></span>
<span class="line"><span style="color:#A6ACCD;">        },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        temporaryToolObjectType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gameObject.</span><span style="color:#FFCB6B;">typeIndexMap</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">stick</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;">-- &lt;- For animation purposes</span></span>
<span class="line"><span style="color:#A6ACCD;">        temporaryToolOffset </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">vec3xMat3</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">vec3</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">0.35</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">0.0</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">0.0</span><span style="color:#A6ACCD;">), cookingStickRotationOffset),</span></span>
<span class="line"><span style="color:#A6ACCD;">        temporaryToolRotation </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> cookingStickRotation,</span></span>
<span class="line"><span style="color:#A6ACCD;">    })</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><p>Voila, the recipe is added.</p><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-hidden="true">#</a></h2><p>This concludes our minimalist mod that creates a charcoal object and its associated model, then adds it as a resource and a storable item, along with a recipe to craft it at a campfire.</p><p>You can copy/paste the code, make some modifications, then run Sapiens and create a new world, enabling both this mod as well as the hammerstone framework mod. If it works (likely it will not), then you can click on a branch in a storage area, choose craft, and see the charcoal as one of the crafting options.</p><h3 id="my-code-does-not-work" tabindex="-1">My code does not work <a class="header-anchor" href="#my-code-does-not-work" aria-hidden="true">#</a></h3><p>Either you made a change, or I made a typo, either way this is a valuable lesson to learn as you will constantly have to fix annoying bugs.</p><p>Fixing bugs is best done by checking the logs. There are two log locations:</p><ul><li>The main Sapiens logs, check these logs if your game crashes before being able to create a world. These can be found at <code>AppData/roaming/sapiens/</code> or for Proton users: <code>/SteamLibrary/steamapps/compatdata/1060230/pfx/drive_c/users/steamuser/AppData/Roaming/majicjungle/sapiens</code></li><li>The world logs, check these logs if your game crashes after hitting <code>create world</code>. Even if your game does not crash, these logs can still contain useful errors. These can be found at <code>AppData/roaming/sapiens/players/playerID/worlds/worldID/logs</code> or for Proton users: <code>/mnt/LinuxHDD/SteamLibrary/steamapps/compatdata/1060230/pfx/drive_c/users/steamuser/AppData/Roaming/majicjungle/sapiens/players/playerID/worlds/worldID/logs</code></li></ul><p>Ask for help in the <a href="https://discord.gg/WnN8hj2Fyg" target="_blank" rel="noreferrer">Discord</a> if you&#39;re stuck. Have fun!</p>`,51),e=[p];function t(c,r,C,y,A,D){return n(),a("div",null,e)}const d=s(o,[["render",t]]);export{F as __pageData,d as default};
