import{_ as s,c as e,o as n,d as a}from"./app.7a3810d5.js";const o="/assets/flat-planet-result.6d719821.png",u=JSON.parse('{"title":"World Generation","description":"","frontmatter":{},"headers":[{"level":2,"title":"Common Objects","slug":"common-objects","link":"#common-objects","children":[{"level":3,"title":"SPWorldGenOptions","slug":"spworldgenoptions","link":"#spworldgenoptions","children":[]},{"level":3,"title":"SPNoise","slug":"spnoise","link":"#spnoise","children":[]}]},{"level":2,"title":"Vertex Terrain Generation","slug":"vertex-terrain-generation","link":"#vertex-terrain-generation","children":[{"level":3,"title":"Methods","slug":"methods","link":"#methods","children":[]},{"level":3,"title":"Example","slug":"example","link":"#example","children":[]}]},{"level":2,"title":"Biome and Climate assignment","slug":"biome-and-climate-assignment","link":"#biome-and-climate-assignment","children":[{"level":3,"title":"Objects","slug":"objects","link":"#objects","children":[]},{"level":3,"title":"Methods","slug":"methods-1","link":"#methods-1","children":[]}]},{"level":2,"title":"Particle Engine","slug":"particle-engine","link":"#particle-engine","children":[]}],"relativePath":"docs/scripting/worldgen.md","lastUpdated":1665651671000}'),l={name:"docs/scripting/worldgen.md"},t=a(`<h1 id="world-generation" tabindex="-1">World Generation <a class="header-anchor" href="#world-generation" aria-hidden="true">#</a></h1><p>World generation is split across multiple parts, knowledge of <a href="/guide/c-getting-started.html">C modding</a> is required.</p><h2 id="common-objects" tabindex="-1">Common Objects <a class="header-anchor" href="#common-objects" aria-hidden="true">#</a></h2><p>Common objects are used in more than one stage of world generation.</p><h3 id="spworldgenoptions" tabindex="-1">SPWorldGenOptions <a class="header-anchor" href="#spworldgenoptions" aria-hidden="true">#</a></h3><p><code>SPWorldGenOptions</code> is used to pass settings from the GUI to the generation functions. It&#39;s used in <code>spHeightGet</code> for vertex height generation and <code>spRainfallGet</code> for rainfall generation. It&#39;s defined in <code>SPCommon.h</code></p><div class="language-C"><button class="copy"></button><span class="lang">C</span><pre><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> SPWorldGenOptions </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> heightOffset</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> rainfallMultiplier</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> temperatureOffset</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	SPVec3 scales</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	SPVec3 influences</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="spnoise" tabindex="-1">SPNoise <a class="header-anchor" href="#spnoise" aria-hidden="true">#</a></h3><p><code>SPNoise</code> is part of the noise generation system. While the exact details are unknown it can be used to generate noise values or generate things with a chance.</p><h2 id="vertex-terrain-generation" tabindex="-1">Vertex Terrain Generation <a class="header-anchor" href="#vertex-terrain-generation" aria-hidden="true">#</a></h2><p>Vertex Terrain generation determines the height of every point in the world. This height is represented in the <a href="/docs/visuals/coordinates.html">prerender coordinate scale</a>. The methods required for vertex generation are defined in <code>SPHeight.h</code>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can convert meters into the prerender scale by using the <code>SP_METERS_TO_PRERENDER</code> macro:</p><div class="language-c"><button class="copy"></button><span class="lang">c</span><pre><code><span class="line"><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> heightInPrerenderScale </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SP_METERS_TO_PRERENDER</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">heightInMeters</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div></div><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-hidden="true">#</a></h3><p>The following methods can be overridden to implement custom vertex terrain generation.</p><h4 id="spheightget" tabindex="-1">spHeightGet <a class="header-anchor" href="#spheightget" aria-hidden="true">#</a></h4><ul><li><code>previousHeight: SPVec4</code> when <code>spReplacesPreviousHeight</code> returns false, then previousHeight is the output of the previous mod, otherwise it should be ignored</li><li><code>noise1: SPNoise*</code> An instance of a noise generator, can be used to get smooth noise values at a given point.</li><li><code>noise2: SPNoise*</code> An instance of a noise generator, can be used to get smooth noise values at a given point. Same as <code>noise1</code> but initialized with a different seed.</li><li><code>pointNormal: SPVec3</code> The normalized location on the planet , you can imagine it as sampling points on a sphere with <code>(0,0,0)</code> as the center and a radius of <code>1</code>.</li><li><code>noiseLoc: SPVec3</code> Position to sample noise values at, defined as <code>pointNormal + vec3(1.2, 1.2, 1.3)</code> as noise generation breaks down at coordinates <code>&lt;=0</code></li><li><code>worldGenOptions: SPWorldGenOptions</code> Options for the world generator, set in the UI when the user is generating a new world.</li><li><code>riverValue: double</code> Used as a crude height multiplier.</li><li><code>riverDistance: double</code> Distance to a nearby river if one is close enough.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can calculate the latitude and longitude as follows:</p><div class="language-c"><button class="copy"></button><span class="lang">c</span><pre><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> lat </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">asin</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pointNormal.y</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> lon </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">fabs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pointNormal.x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fabs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pointNormal.z</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0000001</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        lon </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">atan2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pointNormal</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">z</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pointNormal</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Some points are <code>NaN</code>, the vanilla implementation returns <code>NaN</code> at these points. Returning anything else seems to cause artifacts on the equator of the planet.</p></div><p>The return value from te function is a vector with 4 components. The first component is the height, the other components are currently unused and in the vanilla implementation always <code>riverDistance</code>, <code>0</code> and <code>0</code> respectively.</p><h4 id="spreplacespreviousheight" tabindex="-1">spReplacesPreviousHeight <a class="header-anchor" href="#spreplacespreviousheight" aria-hidden="true">#</a></h4><p>This method has no arguments, when <code>true</code> is returned the output of the previous mod is ignored. If <code>false</code> is returned the output of the previous mod is passed to <code>spHeightGet</code></p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h3><p>Below is the code for the <code>FlatTerrainMod</code> which returns a height of 10 for every position in the world and generates a planet that has flat terrain.</p><div class="language-c"><button class="copy"></button><span class="lang">c</span><pre><code><span class="line"><span style="color:#89DDFF;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SPHeight.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">spReplacesPreviousHeight</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">SPVec4 </span><span style="color:#82AAFF;">spHeightGet</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SPVec4 </span><span style="color:#A6ACCD;">previousHeight</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;"> //if spReplacesPreviousHeight returns false, then previousHeight is the output of the previous mod, otherwise it should be ignored.</span></span>
<span class="line"><span style="color:#A6ACCD;">                   SPNoise</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">noise1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                   SPNoise</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">noise2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                   SPVec3 </span><span style="color:#A6ACCD;">pointNormal</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                   SPVec3 </span><span style="color:#A6ACCD;">noiseLoc</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                   SPWorldGenOptions </span><span style="color:#A6ACCD;">worldGenOptions</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                   </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">riverValue</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                   </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">riverDistance</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    SPVec4 result </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;">SP_METERS_TO_PRERENDER</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> riverDistance</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><details class="details custom-block"><summary>Result of the above code</summary><p><img src="`+o+`" alt=""></p></details><h2 id="biome-and-climate-assignment" tabindex="-1">Biome and Climate assignment <a class="header-anchor" href="#biome-and-climate-assignment" aria-hidden="true">#</a></h2><div class="danger custom-block"><p class="custom-block-title">Oh-no!</p><p>This section isn&#39;t done. But you can help! Click the &#39;Edit Page&#39; button at the bottom.</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This section mentions the vanilla code several times. You can find it <a href="https://github.com/Majic-Jungle/splugins" target="_blank" rel="noreferrer">here</a>.</p></div><p>Biomes are assigned in this stage of world generation, objects like trees and rocks are placed in this stage of generation.</p><h3 id="objects" tabindex="-1">Objects <a class="header-anchor" href="#objects" aria-hidden="true">#</a></h3><p>Objects that are common to multiple methods during biome generation.</p><h4 id="spbiomethreadstate" tabindex="-1">SPBiomeThreadState <a class="header-anchor" href="#spbiomethreadstate" aria-hidden="true">#</a></h4><p>Allows the biome generator to get indices for various objects generated on the Lua side.</p><div class="language-C"><button class="copy"></button><span class="lang">C</span><pre><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> SPBiomeThreadState </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> terrainGenerator</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;"> //private</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> gom</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;"> //private</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// The following methods can be called to get the index from the lua typeMap for various types of objects.</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">uint16_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#F07178;">getBiomeTag</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> SPBiomeThreadState</span><span style="color:#89DDFF;">*,</span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*);</span><span style="color:#676E95;"> // Get the index for the given biome tag, eg &quot;hot&quot;. </span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#F07178;">getTerrainBaseTypeIndex</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> SPBiomeThreadState</span><span style="color:#89DDFF;">*,</span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*);</span><span style="color:#676E95;"> // Get the index for the given terrain base type, eg &quot;riverSand&quot;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#F07178;">getTerrainVariation</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> SPBiomeThreadState</span><span style="color:#89DDFF;">*,</span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*);</span><span style="color:#676E95;"> // Get the index for the given terrain variation, eg &quot;grassSnow&quot;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#F07178;">getTerrainModification</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> SPBiomeThreadState</span><span style="color:#89DDFF;">*,</span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*);</span><span style="color:#676E95;"> // Get the index for the given terrain modification, eg &quot;preventGrassAndSnow&quot;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#F07178;">getGameObjectTypeIndex</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> SPBiomeThreadState</span><span style="color:#89DDFF;">*,</span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*);</span><span style="color:#676E95;"> // Get the index for the given object type, eg &quot;appleTree&quot;. Note that this method can be null and has to be checked for existence</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#F07178;">getMaterialTypeIndex</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> SPBiomeThreadState</span><span style="color:#89DDFF;">*,</span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*);</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#F07178;">getDecalGroupTypeIndex</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> SPBiomeThreadState</span><span style="color:#89DDFF;">*,</span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">SPSurfaceTypeDefault</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#F07178;">getSurfaceDefaultsForBaseType</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> SPBiomeThreadState</span><span style="color:#89DDFF;">*,</span><span style="color:#C792EA;">uint32_t</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">SPSurfaceTypeDefault</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#F07178;">getSurfaceDefaultsForVariationType</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> SPBiomeThreadState</span><span style="color:#89DDFF;">*,</span><span style="color:#C792EA;">uint32_t</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#F07178;">getSurfaceBaseTypeForFillObjectType</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> SPBiomeThreadState</span><span style="color:#89DDFF;">*,</span><span style="color:#C792EA;">uint32_t</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	SPRand</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> spRand</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	SPNoise</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> spNoise1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	SPNoise</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> spNoise2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="methods-1" tabindex="-1">Methods <a class="header-anchor" href="#methods-1" aria-hidden="true">#</a></h3><p>The following methods can be overridden to implement custom biome generation.</p><h4 id="spbiomeinit" tabindex="-1">spBiomeInit <a class="header-anchor" href="#spbiomeinit" aria-hidden="true">#</a></h4><ul><li><code>threadState: SPBiomeThreadState*</code></li></ul><p>This method has no return value, the method is used to initialize static variables with indices of the relevant object.</p><h4 id="spbiomegettagsforpoint" tabindex="-1">spBiomeGetTagsForPoint <a class="header-anchor" href="#spbiomegettagsforpoint" aria-hidden="true">#</a></h4><p>It&#39;s currently unknown what this method exactly does. You can help by checking out the vanilla code!</p><h4 id="spbiomegetsurfacetypeforpoint" tabindex="-1">spBiomeGetSurfaceTypeForPoint <a class="header-anchor" href="#spbiomegetsurfacetypeforpoint" aria-hidden="true">#</a></h4><p>It&#39;s currently unknown what this method exactly does. You can help by checking out the vanilla code!</p><h4 id="spbiomegettransientgameobjecttypesforfacesubdivision" tabindex="-1">spBiomeGetTransientGameObjectTypesForFaceSubdivision <a class="header-anchor" href="#spbiomegettransientgameobjecttypesforfacesubdivision" aria-hidden="true">#</a></h4><ul><li><code>threadState SPBiomeThreadState*</code> The state of the thread including noise generators and a RNG object.</li><li><code>incomingTypeCount: int</code> Amount of already generated objects</li><li><code>types: uint32_t*</code> Array of types to be generated with size <code>BIOME_MAX_GAME_OBJECT_COUNT_PER_SUBDIVISION</code>.</li><li><code>biomeTags: uint16_t*</code>Array of biome tags at the position to generate.</li><li><code>tagCount: int</code> Amount of biome tags at the position to generate</li><li><code>pointNormal: SPVec3</code></li><li><code>noiseLoc: SPVec3</code> Location to be used in conjunction with the given noiseGenerator.</li><li><code>faceUniqueID: uint64_t</code> The unique id of the face, can be used to get random values.</li><li><code>level: int</code> The level of subdivisions the face has undergone.</li><li><code>altitude: double</code> Altitude of the face</li><li><code>steepness: double</code></li><li><code>riverDistance: double</code></li></ul><p>This method is responsible for spawning gameobjects, this ranges from rocks to trees. Adding gameobjects is done by adding the relevant index (acquired in <code>spBiomeInit</code>) the <code>types</code> array. It&#39;s your responsibility that you write to indices within the range <code>[incomingTypeCount, BIOME_MAX_GAME_OBJECT_COUNT_PER_SUBDIVISION)</code>. Vanilla has a helper macro for this, it requires you to define an integer at the top of the method (<code>int addedCount = incomingTypeCount</code>): Note that this method is called for all mods enabled (this includes vanilla!) and you can thus already have gameobjects in the <code>types</code> array. It&#39;s possible to overwrite previous mods by overwriting previous indices.</p><div class="language-C"><button class="copy"></button><span class="lang">C</span><pre><code><span class="line"><span style="color:#89DDFF;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ADD_OBJECT</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">__addType__</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">                                                \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  types</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">addedCount</span><span style="color:#89DDFF;">++]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> __addType__</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">                                           \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">addedCount </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> BIOME_MAX_GAME_OBJECT_COUNT_PER_SUBDIVISION</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">             </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> addedCount</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">                                                         </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Vanilla spawns different kinds of objects at different subdivision levels, look at the vanilla code for specifics.</p><h2 id="particle-engine" tabindex="-1">Particle Engine <a class="header-anchor" href="#particle-engine" aria-hidden="true">#</a></h2><p>It&#39;s currently unknown how the particle engine works, the vanilla implementation can be found in the <a href="https://github.com/Majic-Jungle/splugins/blob/main/SPVanilla/src/SPParticles.c" target="_blank" rel="noreferrer">splugins</a> repository.</p>`,50),p=[t];function r(c,i,d,y,h,F){return n(),e("div",null,p)}const g=s(l,[["render",r]]);export{u as __pageData,g as default};
